# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# ################################################################ #

# use skhd --observe to find key value
# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

###################################################
#               My Configuration                  #
###################################################

# hyper = ctrl + alt + cmd + shift

# monitor focus + focus on first window
hyper - 1 : index=1; eval "$(yabai -m query --spaces | jq --argjson index "${index}" -r '(.[] | select(.index == $index).windows[0]) as $wid | if $wid then "yabai -m window --focus \"" + ($wid | tostring) + "\"" else "skhd --key \"ctrl - " + (map(select(."native-fullscreen" == 0)) | index(map(select(.index == $index))) + 1 % 10 | tostring) + "\"" end')"
hyper - 2 : index=2; eval "$(yabai -m query --spaces | jq --argjson index "${index}" -r '(.[] | select(.index == $index).windows[0]) as $wid | if $wid then "yabai -m window --focus \"" + ($wid | tostring) + "\"" else "skhd --key \"ctrl - " + (map(select(."native-fullscreen" == 0)) | index(map(select(.index == $index))) + 1 % 10 | tostring) + "\"" end')"
hyper - 3 : index=3; eval "$(yabai -m query --spaces | jq --argjson index "${index}" -r '(.[] | select(.index == $index).windows[0]) as $wid | if $wid then "yabai -m window --focus \"" + ($wid | tostring) + "\"" else "skhd --key \"ctrl - " + (map(select(."native-fullscreen" == 0)) | index(map(select(.index == $index))) + 1 % 10 | tostring) + "\"" end')"

# restart yabai
ctrl + alt + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

# recycle through windows to focus
# 0x2F = .
# 0x2B = ,
ctrl + alt - 0x2F : yabai -m window --focus prev || yabai -m window --focus last
ctrl + alt - 0x2B : yabai -m window --focus next || yabai -m window --focus first

# display focus cycle
alt - tab : yabai -m display --focus next || yabai -m display --focus first 

# move windows
ctrl + alt + cmd - left : yabai -m window --swap west
ctrl + alt + cmd - up : yabai -m window --swap north
ctrl + alt + cmd - right : yabai -m window --swap east
ctrl + alt + cmd - down : yabai -m window --swap south

# increase window size
ctrl + alt - left : \
    yabai -m window --resize left:-20:0 ; \
    yabai -m window --resize right:-20:0

ctrl + alt - down : \
    yabai -m window --resize bottom:0:20 ; \
    yabai -m window --resize top:0:20

ctrl + alt - up : \
    yabai -m window --resize top:0:-20 ; \
    yabai -m window --resize bottom:0:-20

ctrl + alt - right : \
    yabai -m window --resize right:20:0 ; \
    yabai -m window --resize left:20:0

# toggle float
ctrl + alt + cmd - f : yabai -m window --toggle float

# focus mode
hyper - f : yabai -m window --toggle zoom-fullscreen

# close active application
hyper - backspace : $(yabai -m window $(yabai -m query --windows --window | jq -re ".id") --close)

# balance
hyper - b : yabai -m space --balance

# minimize current focused window
ctrl + alt + cmd - m : yabai -m window --minimize